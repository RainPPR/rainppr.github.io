{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u7b80\u4ecb","text":""},{"location":"#_2","title":"\u6d4b\u8bd5","text":"<pre><code>// Source: \u6d1b\u8c37\n// Problem: P9753 [CSP-S 2023] \u6d88\u6d88\u4e50\n// Algorithm:\n// Memory Limit: 512 MB\n// Time Limit: 1000 ms\n// Author: RainPPR\n// Datetime: 2024-08-09 10:13\n\n#ifndef M_DEBUG\n#define NDEBUG 1\n#define FAST_IO 1\n\n#define D(x) ({ void(0); })\n#else\n#define D(x) ({ auto t = (x); cerr &lt;&lt; \"| DEBUG #\" &lt;&lt; __LINE__ &lt;&lt; \" IN \" &lt;&lt; __FUNCTION__ &lt;&lt; \"() \\t| \\t\" &lt;&lt; #x &lt;&lt; \" = \\t[\" &lt;&lt; t &lt;&lt; \"]\\n\"; void(0); })\n#endif\n\n#include &lt;bits/stdc++.h&gt;\n\n#ifdef FAST_IO\n#define endl \"\\n\"\n#endif\n\nusing namespace std;\n\n// -----------------------------------------------------------------------------\n\nusing ll = long long;\n\nll qpow(ll a, ll b, ll p) {\n    a %= p;\n    ll r = 1;\n    for (; b; b &gt;&gt;= 1) {\n        if (b &amp; 1)\n            r = r * a % p;\n        a = a * a % p;\n    }\n    return r;\n}\n\nll inv(ll a, ll p) {\n    a %= p;\n    assert(a != 0);\n    return qpow(a, p - 2, p);\n}\n\ntemplate&lt;const ll MOD&gt;\nstruct mod_matrix {\n    ll a, c;\n    ll b, d;\n    mod_matrix() = default;\n    mod_matrix(ll a, ll b, ll c, ll d): a(a % MOD), b(b % MOD), c(c % MOD), d(d % MOD) {}\n    friend bool operator ==(const mod_matrix &amp;x, const mod_matrix &amp;y) {\n        return x.a == y.a &amp;&amp; x.b == y.b &amp;&amp; x.c == y.c &amp;&amp; x.d == y.d;\n    }\n    friend mod_matrix operator *(const mod_matrix &amp;x, const mod_matrix &amp;y) {\n        mod_matrix r(x.a * y.a + x.c * y.b, x.b * y.a + x.d * y.b, x.a * y.c + x.c * y.d, x.b * y.c + x.d * y.d);\n        return r;\n    }\n    friend mod_matrix operator *(const mod_matrix &amp;x, const int &amp;y) {\n        mod_matrix r(x.a * y, x.b * y, x.c * y, x.d * y);\n        return r;\n    }\n    friend mod_matrix operator *(const int &amp;y, const mod_matrix &amp;x) {\n        mod_matrix r(x.a * y, x.b * y, x.c * y, x.d * y);\n        return r;\n    }\n    friend mod_matrix operator !(const mod_matrix &amp;x) {\n        ll div = inv((x.a * x.d - x.b * x.c) % MOD + MOD, MOD);\n        mod_matrix&lt;MOD&gt; r(x.d, MOD - x.b, MOD - x.c, x.a);\n        return r * div;\n    }\n    friend ostream &amp;operator &lt;&lt;(ostream &amp;out, const mod_matrix &amp;x) {\n        out &lt;&lt; \"[(\" &lt;&lt; x.a &lt;&lt; \", \" &lt;&lt; x.b &lt;&lt; \"), (\" &lt;&lt; x.c &lt;&lt; \", \" &lt;&lt; x.d &lt;&lt; \")]\";\n        return out;\n    }\n};\n\n// -----------------------------------------------------------------------------\n\nconstexpr ll MOD = 1e9 + 7;\n\nusing matrix = mod_matrix &lt; MOD &gt;;\n\nstruct my_hash {\n    size_t operator () (const matrix &amp;x) const {\n        size_t res1 = x.a ^ x.b ^ x.c ^ x.d;\n        return res1 + x.a + x.b + x.c;\n    }\n};\n\nmt19937 rnd(time(0));\n\n#define random_matrix() ({ \\\n        matrix __m_r__(rnd() % MOD + 1, rnd() % MOD + 1, rnd() % MOD + 1, rnd() % MOD + 1); \\\n        if ((__m_r__.a * __m_r__.d - __m_r__.b * __m_r__.c) % MOD == 0) ++__m_r__.a; \\\n        __m_r__; \\\n    })\n\n// -----------------------------------------------------------------------------\n\nmatrix matrices[30], rmatrices[30];\n\nconst matrix Imatrix(1, 0, 0, 1);\n\nconstexpr int N = 2e6 + 10;\n\nint bucket[N];\n\nmatrix arr[N];\n\nll Main() {\n    for (int i = 0; i &lt; 26; ++i) {\n        matrices[i] = random_matrix();\n        rmatrices[i] = !matrices[i];\n        assert(matrices[i] * rmatrices[i] == Imatrix);\n    }\n    int n;\n    cin &gt;&gt; n;\n    string str;\n    cin &gt;&gt; str;\n    for (int i = 0; i &lt; n; ++i) {\n        int c = str[i] - 'a';\n        ++bucket[c];\n        arr[i] = (bucket[c] &amp; 1 ? matrices : rmatrices)[c];\n    }\n    ll ans = 0;\n    unordered_map&lt;matrix, int, my_hash&gt; bucket;\n    matrix pre = Imatrix;\n    for (int i = 0; i &lt; n; ++i) {\n        ++bucket[pre];\n        pre = pre * arr[i];\n        ans += bucket.count(pre) ? bucket[pre] : 0;\n    }\n    return ans;\n}\n\n// -----------------------------------------------------------------------------\n\nsigned main() {\n#ifdef FAST_IO\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n#endif\n    cout &lt;&lt; Main() &lt;&lt; endl;\n    return 0;\n}\n</code></pre>  a+b  <p>a+b</p>"},{"location":"#material-color-palette","title":"Material color palette \u989c\u8272\u4e3b\u9898","text":""},{"location":"#color-scheme","title":"Color Scheme \u914d\u8272\u65b9\u6848","text":"<p>\u6839\u636e\u6d4f\u89c8\u5668\u4e0e\u7cfb\u7edf\u8bbe\u7f6e\u81ea\u52a8\u5207\u6362\u660e\u6697\u4e3b\u9898\uff0c\u4e5f\u53ef\u624b\u52a8\u5207\u6362</p> <code>Default</code> <code>Slate</code>"},{"location":"#primary-colors","title":"Primary colors \u4e3b\u8272","text":"<p>\u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272</p> <code>Red</code> <code>Pink</code> <code>Purple</code> <code>Deep Purple</code> <code>Indigo</code> <code>Blue</code> <code>Light Blue</code> <code>Cyan</code> <code>Teal</code> <code>Green</code> <code>Light Green</code> <code>Lime</code> <code>Yellow</code> <code>Amber</code> <code>Orange</code> <code>Deep Orange</code> <code>Brown</code> <code>Grey</code> <code>Blue Grey</code> <code>White</code>"},{"location":"#accent-colors","title":"Accent colors \u8f85\u52a9\u8272","text":"<p>\u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272</p> <code>Red</code> <code>Pink</code> <code>Purple</code> <code>Deep Purple</code> <code>Indigo</code> <code>Blue</code> <code>Light Blue</code> <code>Cyan</code> <code>Teal</code> <code>Green</code> <code>Light Green</code> <code>Lime</code> <code>Yellow</code> <code>Amber</code> <code>Orange</code> <code>Deep Orange</code>"},{"location":"discussion/","title":"\u8ba8\u8bba\u4ea4\u6d41","text":""},{"location":"usage/","title":"\u5982\u4f55\u4f7f\u7528","text":""},{"location":"usage/#_2","title":"\u7b80\u4ecb","text":""},{"location":"usage/#_3","title":"\u5982\u4f55","text":""},{"location":"start/hello/","title":"\u6d4b\u8bd5","text":"\\text{Hello World}"}]}